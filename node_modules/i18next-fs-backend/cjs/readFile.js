"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.readFileSync = readFileSync;
exports.readFile = readFile;

var _json = _interopRequireDefault(require("./formats/json5.js"));

var _yaml = _interopRequireDefault(require("./formats/yaml.js"));

var fsMod = _interopRequireWildcard(require("./fs.js"));

var _extname = _interopRequireDefault(require("./extname.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var isDeno = typeof Deno !== 'undefined';
var YAML = typeof _yaml.default !== 'undefined' && _yaml.default.load ? _yaml.default : undefined;
var fs = fsMod ? fsMod.default || fsMod : undefined;

var readFileInNodeSync = function readFileInNodeSync(filename) {
  return fs.readFileSync(filename, 'utf8');
};

var readFileInNode = function readFileInNode(filename) {
  return new Promise(function (resolve, reject) {
    return fs.readFile(filename, 'utf8', function (err, data) {
      return err ? reject(err) : resolve(data);
    });
  });
};

var readFileInDenoSync = function readFileInDenoSync(filename) {
  var decoder = new TextDecoder('utf-8');
  var data = Deno.readFileSync(filename);
  return decoder.decode(data);
};

var readFileInDeno = function readFileInDeno(filename) {
  return new Promise(function (resolve, reject) {
    var decoder = new TextDecoder('utf-8');
    Deno.readFile(filename).then(function (data) {
      resolve(decoder.decode(data));
    }).catch(reject);
  });
};

var parseData = function parseData(extension, data, options) {
  data = data.replace(/^\uFEFF/, '');
  var result = {};

  switch (extension) {
    case '.js':
    case '.ts':
      if (typeof module === 'undefined') {
        if (data.indexOf('exports') > -1) {
          data = "(".concat(data.substring(data.indexOf('=') + 1).replace(/;/, ''), ")");
        } else if (data.indexOf('export default ') > -1) {
          data = "(".concat(data.substring(data.indexOf('export default ') + 15).replace(/;/, ''), ")");
        }
      }

      result = eval(data);
      break;

    case '.json5':
      result = _json.default.parse(data);
      break;

    case '.yml':
    case '.yaml':
      result = YAML.load(data);
      break;

    default:
      result = options.parse(data);
  }

  return result;
};

function readFileSync(filename, options) {
  var ext = (0, _extname.default)(filename);

  if (['.js', '.ts'].indexOf(ext) > -1 && typeof require !== 'undefined') {
    return require(!filename.startsWith('/') && typeof process !== 'undefined' && process.cwd ? "".concat(process.cwd(), "/").concat(filename) : filename);
  }

  var data;

  if (isDeno) {
    data = readFileInDenoSync(filename);
  } else {
    data = readFileInNodeSync(filename);
  }

  return parseData(ext, data, options);
}

function readFile(filename) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    parse: JSON.parse
  };
  var ext = (0, _extname.default)(filename);

  if (['.js', '.ts'].indexOf(ext) > -1 && typeof require !== 'undefined') {
    return new Promise(function (resolve, reject) {
      try {
        resolve(require(!filename.startsWith('/') && typeof process !== 'undefined' && process.cwd ? "".concat(process.cwd(), "/").concat(filename) : filename));
      } catch (err) {
        reject(err);
      }
    });
  }

  var fn = isDeno ? readFileInDeno : readFileInNode;
  return new Promise(function (resolve, reject) {
    fn(filename).then(function (data) {
      try {
        var ret = parseData(ext, data, options);
        resolve(ret);
      } catch (err) {
        err.message = 'error parsing ' + filename + ': ' + err.message;
        reject(err);
      }
    }).catch(reject);
  });
}
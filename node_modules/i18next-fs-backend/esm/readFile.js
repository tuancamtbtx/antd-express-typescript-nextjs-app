import JSON5 from './formats/json5.js';
import jsYaml from './formats/yaml.js';
import * as fsMod from './fs.cjs';
import extname from './extname.js';
var isDeno = typeof Deno !== 'undefined';
var YAML = typeof jsYaml !== 'undefined' && jsYaml.load ? jsYaml : undefined;
var fs = fsMod ? fsMod.default || fsMod : undefined;

var readFileInNodeSync = function readFileInNodeSync(filename) {
  return fs.readFileSync(filename, 'utf8');
};

var readFileInNode = function readFileInNode(filename) {
  return new Promise(function (resolve, reject) {
    return fs.readFile(filename, 'utf8', function (err, data) {
      return err ? reject(err) : resolve(data);
    });
  });
};

var readFileInDenoSync = function readFileInDenoSync(filename) {
  var decoder = new TextDecoder('utf-8');
  var data = Deno.readFileSync(filename);
  return decoder.decode(data);
};

var readFileInDeno = function readFileInDeno(filename) {
  return new Promise(function (resolve, reject) {
    var decoder = new TextDecoder('utf-8');
    Deno.readFile(filename).then(function (data) {
      resolve(decoder.decode(data));
    }).catch(reject);
  });
};

var parseData = function parseData(extension, data, options) {
  data = data.replace(/^\uFEFF/, '');
  var result = {};

  switch (extension) {
    case '.js':
    case '.ts':
      if (typeof module === 'undefined') {
        if (data.indexOf('exports') > -1) {
          data = "(".concat(data.substring(data.indexOf('=') + 1).replace(/;/, ''), ")");
        } else if (data.indexOf('export default ') > -1) {
          data = "(".concat(data.substring(data.indexOf('export default ') + 15).replace(/;/, ''), ")");
        }
      }

      result = eval(data);
      break;

    case '.json5':
      result = JSON5.parse(data);
      break;

    case '.yml':
    case '.yaml':
      result = YAML.load(data);
      break;

    default:
      result = options.parse(data);
  }

  return result;
};

export function readFileSync(filename, options) {
  var ext = extname(filename);

  if (['.js', '.ts'].indexOf(ext) > -1 && typeof require !== 'undefined') {
    return require(!filename.startsWith('/') && typeof process !== 'undefined' && process.cwd ? "".concat(process.cwd(), "/").concat(filename) : filename);
  }

  var data;

  if (isDeno) {
    data = readFileInDenoSync(filename);
  } else {
    data = readFileInNodeSync(filename);
  }

  return parseData(ext, data, options);
}
export function readFile(filename) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    parse: JSON.parse
  };
  var ext = extname(filename);

  if (['.js', '.ts'].indexOf(ext) > -1 && typeof require !== 'undefined') {
    return new Promise(function (resolve, reject) {
      try {
        resolve(require(!filename.startsWith('/') && typeof process !== 'undefined' && process.cwd ? "".concat(process.cwd(), "/").concat(filename) : filename));
      } catch (err) {
        reject(err);
      }
    });
  }

  var fn = isDeno ? readFileInDeno : readFileInNode;
  return new Promise(function (resolve, reject) {
    fn(filename).then(function (data) {
      try {
        var ret = parseData(ext, data, options);
        resolve(ret);
      } catch (err) {
        err.message = 'error parsing ' + filename + ': ' + err.message;
        reject(err);
      }
    }).catch(reject);
  });
}
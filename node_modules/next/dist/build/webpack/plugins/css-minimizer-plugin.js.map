{"version":3,"sources":["../../../../build/webpack/plugins/css-minimizer-plugin.ts"],"names":["RawSource","SourceMapSource","webpack","sources","CSS_REGEX","isWebpack5","parseInt","version","CssMinimizerPlugin","constructor","options","__next_css_remove","optimizeAsset","file","asset","postcssOptions","to","from","input","map","sourceAndMap","source","prev","then","res","css","toJSON","apply","compiler","hooks","compilation","tap","cache","getCache","processAssets","tapPromise","name","stage","Compilation","PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE","assets","files","Object","keys","Promise","all","filter","test","etag","getLazyHashedEtag","cachedResult","getPromise","result","storePromise","optimizeChunkAssets","chunks","reduce","acc","chunk","concat","entry"],"mappings":"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","sourcesContent":["import { process as minify } from 'cssnano-simple'\nimport webpack from 'webpack'\nimport sources from 'webpack-sources'\n\n// @ts-ignore: TODO: remove ignore when webpack 5 is stable\nconst { RawSource, SourceMapSource } = webpack.sources || sources\n\n// https://github.com/NMFR/optimize-css-assets-webpack-plugin/blob/0a410a9bf28c7b0e81a3470a13748e68ca2f50aa/src/index.js#L20\nconst CSS_REGEX = /\\.css(\\?.*)?$/i\n\ntype CssMinimizerPluginOptions = {\n  postcssOptions: {\n    map: false | { prev?: string | false; inline: boolean; annotation: boolean }\n  }\n}\n\nconst isWebpack5 = parseInt(webpack.version!) === 5\n\nexport class CssMinimizerPlugin {\n  __next_css_remove = true\n\n  private options: CssMinimizerPluginOptions\n\n  constructor(options: CssMinimizerPluginOptions) {\n    this.options = options\n  }\n\n  optimizeAsset(file: string, asset: any) {\n    const postcssOptions = {\n      ...this.options.postcssOptions,\n      to: file,\n      from: file,\n    }\n\n    let input: string\n    if (postcssOptions.map && asset.sourceAndMap) {\n      const { source, map } = asset.sourceAndMap()\n      input = source\n      postcssOptions.map.prev = map ? map : false\n    } else {\n      input = asset.source()\n    }\n\n    return minify(input, postcssOptions).then((res) => {\n      if (res.map) {\n        return new SourceMapSource(res.css, file, res.map.toJSON())\n      } else {\n        return new RawSource(res.css)\n      }\n    })\n  }\n\n  apply(compiler: webpack.Compiler) {\n    compiler.hooks.compilation.tap('CssMinimizerPlugin', (compilation: any) => {\n      if (isWebpack5) {\n        const cache = compilation.getCache('CssMinimizerPlugin')\n        compilation.hooks.processAssets.tapPromise(\n          {\n            name: 'CssMinimizerPlugin',\n            // @ts-ignore TODO: Remove ignore when webpack 5 is stable\n            stage: webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE,\n          },\n          async (assets: any) => {\n            const files = Object.keys(assets)\n            await Promise.all(\n              files\n                .filter((file) => CSS_REGEX.test(file))\n                .map(async (file) => {\n                  const asset = assets[file]\n\n                  const etag = cache.getLazyHashedEtag(asset)\n\n                  const cachedResult = await cache.getPromise(file, etag)\n                  if (cachedResult) {\n                    assets[file] = cachedResult\n                    return\n                  }\n\n                  const result = await this.optimizeAsset(file, asset)\n                  await cache.storePromise(file, etag, result)\n                  assets[file] = result\n                })\n            )\n          }\n        )\n        return\n      }\n      compilation.hooks.optimizeChunkAssets.tapPromise(\n        'CssMinimizerPlugin',\n        (chunks: webpack.compilation.Chunk[]) =>\n          Promise.all(\n            chunks\n              .reduce(\n                (acc, chunk) => acc.concat(chunk.files || []),\n                [] as string[]\n              )\n              .filter((entry) => CSS_REGEX.test(entry))\n              .map(async (file) => {\n                const asset = compilation.assets[file]\n\n                compilation.assets[file] = await this.optimizeAsset(file, asset)\n              })\n          )\n      )\n    })\n  }\n}\n"]}
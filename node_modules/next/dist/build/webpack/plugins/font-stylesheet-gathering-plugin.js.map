{"version":3,"sources":["../../../../build/webpack/plugins/font-stylesheet-gathering-plugin.ts"],"names":["RawSource","webpack","sources","isWebpack5","parseInt","version","minifyCss","css","Promise","resolve","excludeAll","discardComments","normalizeWhitespace","exclude","process","from","undefined","then","res","FontStylesheetGatheringPlugin","compiler","gatheredStylesheets","manifestContent","parserHandler","factory","JS_TYPES","type","hooks","parser","for","tap","constructor","name","evaluate","node","state","module","resource","includes","BasicEvaluatedExpression","setRange","range","setExpression","setIdentifier","call","arguments","length","isNodeCreatingLinkElement","propsNode","props","properties","forEach","prop","key","value","rel","href","OPTIMIZED_FONT_PROVIDERS","some","url","startsWith","push","apply","normalModuleFactory","make","tapAsync","compilation","cb","options","output","path","endsWith","mainTemplate","requireExtensions","source","requireFn","JSON","stringify","finishModules","_","modulesFinished","fontDefinitionPromises","map","promiseIndex","content","assets","processAssets","stage","Compilation","PROCESS_ASSETS_STAGE_ADDITIONS","callee","componentNode"],"mappings":"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","sourcesContent":["import webpack, { compilation as CompilationType, Compiler } from 'webpack'\nimport { namedTypes } from 'ast-types'\nimport sources from 'webpack-sources'\nimport {\n  getFontDefinitionFromNetwork,\n  FontManifest,\n} from '../../../next-server/server/font-utils'\n// @ts-ignore\nimport BasicEvaluatedExpression from 'webpack/lib/BasicEvaluatedExpression'\nimport postcss from 'postcss'\nimport minifier from 'cssnano-simple'\nimport { OPTIMIZED_FONT_PROVIDERS } from '../../../next-server/lib/constants'\n\n// @ts-ignore: TODO: remove ignore when webpack 5 is stable\nconst { RawSource } = webpack.sources || sources\n\nconst isWebpack5 = parseInt(webpack.version!) === 5\n\nasync function minifyCss(css: string): Promise<string> {\n  return new Promise((resolve) =>\n    postcss([\n      minifier({\n        excludeAll: true,\n        discardComments: true,\n        normalizeWhitespace: { exclude: false },\n      }),\n    ])\n      .process(css, { from: undefined })\n      .then((res) => {\n        resolve(res.css)\n      })\n  )\n}\n\nexport class FontStylesheetGatheringPlugin {\n  compiler?: Compiler\n  gatheredStylesheets: Array<string> = []\n  manifestContent: FontManifest = []\n\n  private parserHandler = (\n    factory: CompilationType.NormalModuleFactory\n  ): void => {\n    const JS_TYPES = ['auto', 'esm', 'dynamic']\n    // Do an extra walk per module and add interested visitors to the walk.\n    for (const type of JS_TYPES) {\n      factory.hooks.parser\n        .for('javascript/' + type)\n        .tap(this.constructor.name, (parser: any) => {\n          /**\n           * Webpack fun facts:\n           * `parser.hooks.call.for` cannot catch calls for user defined identifiers like `__jsx`\n           * it can only detect calls for native objects like `window`, `this`, `eval` etc.\n           * In order to be able to catch calls of variables like `__jsx`, first we need to catch them as\n           * Identifier and then return `BasicEvaluatedExpression` whose `id` and `type` webpack matches to\n           * invoke hook for call.\n           * See: https://github.com/webpack/webpack/blob/webpack-4/lib/Parser.js#L1931-L1932.\n           */\n          parser.hooks.evaluate\n            .for('Identifier')\n            .tap(this.constructor.name, (node: namedTypes.Identifier) => {\n              // We will only optimize fonts from first party code.\n              if (parser?.state?.module?.resource.includes('node_modules')) {\n                return\n              }\n              return node.name === '__jsx'\n                ? new BasicEvaluatedExpression()\n                    //@ts-ignore\n                    .setRange(node.range)\n                    .setExpression(node)\n                    .setIdentifier('__jsx')\n                : undefined\n            })\n\n          parser.hooks.call\n            .for('__jsx')\n            .tap(this.constructor.name, (node: namedTypes.CallExpression) => {\n              if (node.arguments.length !== 2) {\n                // A font link tag has only two arguments rel=stylesheet and href='...'\n                return\n              }\n              if (!isNodeCreatingLinkElement(node)) {\n                return\n              }\n\n              // node.arguments[0] is the name of the tag and [1] are the props.\n              const propsNode = node.arguments[1] as namedTypes.ObjectExpression\n              const props: { [key: string]: string } = {}\n              propsNode.properties.forEach((prop) => {\n                if (prop.type !== 'Property') {\n                  return\n                }\n                if (\n                  prop.key.type === 'Identifier' &&\n                  prop.value.type === 'Literal'\n                ) {\n                  props[prop.key.name] = prop.value.value as string\n                }\n              })\n              if (\n                !props.rel ||\n                props.rel !== 'stylesheet' ||\n                !props.href ||\n                !OPTIMIZED_FONT_PROVIDERS.some((url) =>\n                  props.href.startsWith(url)\n                )\n              ) {\n                return false\n              }\n\n              this.gatheredStylesheets.push(props.href)\n            })\n        })\n    }\n  }\n\n  public apply(compiler: Compiler) {\n    this.compiler = compiler\n    compiler.hooks.normalModuleFactory.tap(\n      this.constructor.name,\n      this.parserHandler\n    )\n    compiler.hooks.make.tapAsync(this.constructor.name, (compilation, cb) => {\n      // @ts-ignore\n      if (compilation.options.output.path.endsWith('serverless')) {\n        /**\n         * Inline font manifest for serverless case only.\n         * For target: server drive the manifest through physical file and less of webpack magic.\n         */\n        const mainTemplate = compilation.mainTemplate\n        mainTemplate.hooks.requireExtensions.tap(\n          this.constructor.name,\n          (source: string) => {\n            return `${source}\n                // Font manifest declaration\n                ${\n                  mainTemplate.requireFn\n                }.__NEXT_FONT_MANIFEST__ = ${JSON.stringify(\n              this.manifestContent\n            )};`\n          }\n        )\n      }\n      compilation.hooks.finishModules.tapAsync(\n        this.constructor.name,\n        async (_: any, modulesFinished: Function) => {\n          const fontDefinitionPromises = this.gatheredStylesheets.map((url) =>\n            getFontDefinitionFromNetwork(url)\n          )\n\n          this.manifestContent = []\n          for (let promiseIndex in fontDefinitionPromises) {\n            const css = await fontDefinitionPromises[promiseIndex]\n            const content = await minifyCss(css)\n            this.manifestContent.push({\n              url: this.gatheredStylesheets[promiseIndex],\n              content,\n            })\n          }\n          if (!isWebpack5) {\n            compilation.assets['font-manifest.json'] = new RawSource(\n              JSON.stringify(this.manifestContent, null, '  ')\n            )\n          }\n          modulesFinished()\n        }\n      )\n      cb()\n    })\n\n    if (isWebpack5) {\n      compiler.hooks.make.tap(this.constructor.name, (compilation) => {\n        // @ts-ignore TODO: Remove ignore when webpack 5 is stable\n        compilation.hooks.processAssets.tap(\n          {\n            name: this.constructor.name,\n            // @ts-ignore TODO: Remove ignore when webpack 5 is stable\n            stage: webpack.Compilation.PROCESS_ASSETS_STAGE_ADDITIONS,\n          },\n          (assets: any) => {\n            assets['font-manifest.json'] = new RawSource(\n              JSON.stringify(this.manifestContent, null, '  ')\n            )\n          }\n        )\n      })\n    }\n  }\n}\n\nfunction isNodeCreatingLinkElement(node: namedTypes.CallExpression) {\n  const callee = node.callee as namedTypes.Identifier\n  if (callee.type !== 'Identifier') {\n    return false\n  }\n  const componentNode = node.arguments[0] as namedTypes.Literal\n  if (componentNode.type !== 'Literal') {\n    return false\n  }\n  // Next has pragma: __jsx.\n  return callee.name === '__jsx' && componentNode.value === 'link'\n}\n"]}
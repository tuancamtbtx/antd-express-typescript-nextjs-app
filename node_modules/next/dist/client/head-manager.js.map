{"version":3,"sources":["../../client/head-manager.ts"],"names":["DOMAttributeNames","acceptCharset","className","htmlFor","httpEquiv","reactElementToDOM","type","props","el","document","createElement","p","hasOwnProperty","undefined","attr","toLowerCase","setAttribute","children","dangerouslySetInnerHTML","innerHTML","__html","textContent","Array","isArray","join","updateElements","elements","components","removeOldTags","headEl","getElementsByTagName","oldTags","Set","forEach","tag","title","newTag","elementIter","values","done","value","next","isEqualNode","delete","add","appendChild","oldTag","parentNode","removeChild","initHeadManager","initialHeadEntries","map","updatePromise","mountedInstances","updateHead","head","promise","Promise","resolve","then"],"mappings":"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","sourcesContent":["import { createElement } from 'react'\nimport { HeadEntry } from '../next-server/lib/utils'\n\nconst DOMAttributeNames: Record<string, string> = {\n  acceptCharset: 'accept-charset',\n  className: 'class',\n  htmlFor: 'for',\n  httpEquiv: 'http-equiv',\n}\n\nfunction reactElementToDOM({ type, props }: JSX.Element): HTMLElement {\n  const el = document.createElement(type)\n  for (const p in props) {\n    if (!props.hasOwnProperty(p)) continue\n    if (p === 'children' || p === 'dangerouslySetInnerHTML') continue\n\n    // we don't render undefined props to the DOM\n    if (props[p] === undefined) continue\n\n    const attr = DOMAttributeNames[p] || p.toLowerCase()\n    el.setAttribute(attr, props[p])\n  }\n\n  const { children, dangerouslySetInnerHTML } = props\n  if (dangerouslySetInnerHTML) {\n    el.innerHTML = dangerouslySetInnerHTML.__html || ''\n  } else if (children) {\n    el.textContent =\n      typeof children === 'string'\n        ? children\n        : Array.isArray(children)\n        ? children.join('')\n        : ''\n  }\n  return el\n}\n\nfunction updateElements(\n  elements: Set<Element>,\n  components: JSX.Element[],\n  removeOldTags: boolean\n) {\n  const headEl = document.getElementsByTagName('head')[0]\n  const oldTags = new Set(elements)\n\n  components.forEach((tag) => {\n    if (tag.type === 'title') {\n      let title = ''\n      if (tag) {\n        const { children } = tag.props\n        title =\n          typeof children === 'string'\n            ? children\n            : Array.isArray(children)\n            ? children.join('')\n            : ''\n      }\n      if (title !== document.title) document.title = title\n      return\n    }\n\n    const newTag = reactElementToDOM(tag)\n    const elementIter = elements.values()\n\n    while (true) {\n      // Note: We don't use for-of here to avoid needing to polyfill it.\n      const { done, value } = elementIter.next()\n      if (value?.isEqualNode(newTag)) {\n        oldTags.delete(value)\n        return\n      }\n\n      if (done) {\n        break\n      }\n    }\n\n    elements.add(newTag)\n    headEl.appendChild(newTag)\n  })\n\n  oldTags.forEach((oldTag) => {\n    if (removeOldTags) {\n      oldTag.parentNode!.removeChild(oldTag)\n    }\n    elements.delete(oldTag)\n  })\n}\n\nexport default function initHeadManager(initialHeadEntries: HeadEntry[]) {\n  const headEl = document.getElementsByTagName('head')[0]\n  const elements = new Set<Element>(headEl.children)\n\n  updateElements(\n    elements,\n    initialHeadEntries.map(([type, props]) => createElement(type, props)),\n    false\n  )\n\n  let updatePromise: Promise<void> | null = null\n\n  return {\n    mountedInstances: new Set(),\n    updateHead: (head: JSX.Element[]) => {\n      const promise = (updatePromise = Promise.resolve().then(() => {\n        if (promise !== updatePromise) return\n\n        updatePromise = null\n        updateElements(elements, head, true)\n      }))\n    },\n  }\n}\n"]}
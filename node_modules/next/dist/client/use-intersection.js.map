{"version":3,"sources":["../../client/use-intersection.tsx"],"names":["hasIntersectionObserver","IntersectionObserver","useIntersection","rootMargin","disabled","isDisabled","unobserve","visible","setVisible","setRef","el","current","undefined","tagName","observe","isVisible","element","callback","options","id","observer","elements","createObserver","set","size","disconnect","observers","delete","Map","instance","get","entries","forEach","entry","target","isIntersecting","intersectionRatio"],"mappings":"gKAAA,4BACA,oFAMA,KAAMA,CAAAA,uBAAuB,CAAG,MAAOC,CAAAA,oBAAP,GAAgC,WAAhE,CAEO,QAASC,CAAAA,eAAT,CAA4C,CACjDC,UADiD,CAEjDC,QAFiD,CAA5C,CAGqD,CAC1D,KAAMC,CAAAA,UAAU,CAAGD,QAAQ,EAAI,CAACJ,uBAAhC,CAEA,KAAMM,CAAAA,SAAS,CAAG,mBAAlB,CACA,KAAM,CAACC,OAAD,CAAUC,UAAV,EAAwB,oBAAS,KAAT,CAA9B,CAEA,KAAMC,CAAAA,MAAM,CAAG,uBACZC,EAAD,EAAkB,CAChB,GAAIJ,SAAS,CAACK,OAAd,CAAuB,CACrBL,SAAS,CAACK,OAAV,GACAL,SAAS,CAACK,OAAV,CAAoBC,SAApB,CACD,CAED,GAAIP,UAAU,EAAIE,OAAlB,CAA2B,OAE3B,GAAIG,EAAE,EAAIA,EAAE,CAACG,OAAb,CAAsB,CACpBP,SAAS,CAACK,OAAV,CAAoBG,OAAO,CACzBJ,EADyB,CAExBK,SAAD,EAAeA,SAAS,EAAIP,UAAU,CAACO,SAAD,CAFb,CAGzB,CAAEZ,UAAF,CAHyB,CAA3B,CAKD,CACF,CAhBY,CAiBb,CAACE,UAAD,CAAaF,UAAb,CAAyBI,OAAzB,CAjBa,CAAf,CAoBA,qBAAU,IAAM,CACd,GAAI,CAACP,uBAAL,CAA8B,CAC5B,GAAI,CAACO,OAAL,CAAc,iCAAoB,IAAMC,UAAU,CAAC,IAAD,CAApC,EACf,CACF,CAJD,CAIG,CAACD,OAAD,CAJH,EAMA,MAAO,CAACE,MAAD,CAASF,OAAT,CAAP,CACD,CAED,QAASO,CAAAA,OAAT,CACEE,OADF,CAEEC,QAFF,CAGEC,OAHF,CAIE,CACA,KAAM,CAAEC,EAAF,CAAMC,QAAN,CAAgBC,QAAhB,EAA6BC,cAAc,CAACJ,OAAD,CAAjD,CACAG,QAAQ,CAACE,GAAT,CAAaP,OAAb,CAAsBC,QAAtB,EAEAG,QAAQ,CAACN,OAAT,CAAiBE,OAAjB,EACA,MAAO,SAASV,CAAAA,SAAT,EAAqB,CAC1Bc,QAAQ,CAACd,SAAT,CAAmBU,OAAnB,EAEA;AACA,GAAIK,QAAQ,CAACG,IAAT,GAAkB,CAAtB,CAAyB,CACvBJ,QAAQ,CAACK,UAAT,GACAC,SAAS,CAACC,MAAV,CAAiBR,EAAjB,EACD,CACF,CARD,CASD,CAED,KAAMO,CAAAA,SAAS,CAAG,GAAIE,CAAAA,GAAJ,EAAlB,CAQA,QAASN,CAAAA,cAAT,CAAwBJ,OAAxB,CAA8D,CAC5D,KAAMC,CAAAA,EAAE,CAAGD,OAAO,CAACf,UAAR,EAAsB,EAAjC,CACA,GAAI0B,CAAAA,QAAQ,CAAGH,SAAS,CAACI,GAAV,CAAcX,EAAd,CAAf,CACA,GAAIU,QAAJ,CAAc,CACZ,MAAOA,CAAAA,QAAP,CACD,CAED,KAAMR,CAAAA,QAAQ,CAAG,GAAIO,CAAAA,GAAJ,EAAjB,CACA,KAAMR,CAAAA,QAAQ,CAAG,GAAInB,CAAAA,oBAAJ,CAA0B8B,OAAD,EAAa,CACrDA,OAAO,CAACC,OAAR,CAAiBC,KAAD,EAAW,CACzB,KAAMhB,CAAAA,QAAQ,CAAGI,QAAQ,CAACS,GAAT,CAAaG,KAAK,CAACC,MAAnB,CAAjB,CACA,KAAMnB,CAAAA,SAAS,CAAGkB,KAAK,CAACE,cAAN,EAAwBF,KAAK,CAACG,iBAAN,CAA0B,CAApE,CACA,GAAInB,QAAQ,EAAIF,SAAhB,CAA2B,CACzBE,QAAQ,CAACF,SAAD,CAAR,CACD,CACF,CAND,EAOD,CARgB,CAQdG,OARc,CAAjB,CAUAQ,SAAS,CAACH,GAAV,CACEJ,EADF,CAEGU,QAAQ,CAAG,CACVV,EADU,CAEVC,QAFU,CAGVC,QAHU,CAFd,EAQA,MAAOQ,CAAAA,QAAP,CACD","sourcesContent":["import { useCallback, useEffect, useRef, useState } from 'react'\nimport requestIdleCallback from './request-idle-callback'\n\ntype UseIntersectionObserverInit = Pick<IntersectionObserverInit, 'rootMargin'>\ntype UseIntersection = { disabled?: boolean } & UseIntersectionObserverInit\ntype ObserveCallback = (isVisible: boolean) => void\n\nconst hasIntersectionObserver = typeof IntersectionObserver !== 'undefined'\n\nexport function useIntersection<T extends Element>({\n  rootMargin,\n  disabled,\n}: UseIntersection): [(element: T | null) => void, boolean] {\n  const isDisabled = disabled || !hasIntersectionObserver\n\n  const unobserve = useRef<Function>()\n  const [visible, setVisible] = useState(false)\n\n  const setRef = useCallback(\n    (el: T | null) => {\n      if (unobserve.current) {\n        unobserve.current()\n        unobserve.current = undefined\n      }\n\n      if (isDisabled || visible) return\n\n      if (el && el.tagName) {\n        unobserve.current = observe(\n          el,\n          (isVisible) => isVisible && setVisible(isVisible),\n          { rootMargin }\n        )\n      }\n    },\n    [isDisabled, rootMargin, visible]\n  )\n\n  useEffect(() => {\n    if (!hasIntersectionObserver) {\n      if (!visible) requestIdleCallback(() => setVisible(true))\n    }\n  }, [visible])\n\n  return [setRef, visible]\n}\n\nfunction observe(\n  element: Element,\n  callback: ObserveCallback,\n  options: UseIntersectionObserverInit\n) {\n  const { id, observer, elements } = createObserver(options)\n  elements.set(element, callback)\n\n  observer.observe(element)\n  return function unobserve() {\n    observer.unobserve(element)\n\n    // Destroy observer when there's nothing left to watch:\n    if (elements.size === 0) {\n      observer.disconnect()\n      observers.delete(id)\n    }\n  }\n}\n\nconst observers = new Map<\n  string,\n  {\n    id: string\n    observer: IntersectionObserver\n    elements: Map<Element, ObserveCallback>\n  }\n>()\nfunction createObserver(options: UseIntersectionObserverInit) {\n  const id = options.rootMargin || ''\n  let instance = observers.get(id)\n  if (instance) {\n    return instance\n  }\n\n  const elements = new Map<Element, ObserveCallback>()\n  const observer = new IntersectionObserver((entries) => {\n    entries.forEach((entry) => {\n      const callback = elements.get(entry.target)\n      const isVisible = entry.isIntersecting || entry.intersectionRatio > 0\n      if (callback && isVisible) {\n        callback(isVisible)\n      }\n    })\n  }, options)\n\n  observers.set(\n    id,\n    (instance = {\n      id,\n      observer,\n      elements,\n    })\n  )\n  return instance\n}\n"]}
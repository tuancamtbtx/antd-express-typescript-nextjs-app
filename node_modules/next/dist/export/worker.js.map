{"version":3,"sources":["../../export/worker.ts"],"names":["envConfig","require","global","__NEXT_DATA__","nextExport","exportPage","path","pathMap","distDir","outDir","pagesDataDir","renderOpts","buildExport","serverRuntimeConfig","subFolders","serverless","optimizeFonts","optimizeImages","results","ampValidations","query","originalQuery","page","filePath","ampPath","isDynamic","params","updatedPath","locale","__nextLocale","localePathResult","locales","detectedLocale","pathname","hasOrigQueryValues","Object","keys","length","queryWithAutoExportWarn","Error","undefined","headerMocks","headers","getHeader","setHeader","hasHeader","removeHeader","getHeaderNames","req","url","res","setConfig","publicRuntimeConfig","runtimeConfig","htmlFilename","sep","pageExt","pathExt","baseDir","htmlFilepath","promises","mkdir","recursive","html","curRenderOpts","renderMethod","renderToHTML","renderedDuringBuild","getStaticProps","curUrl","parse","format","Component","mod","getServerSideProps","SERVER_PROPS_EXPORT_ERROR","endsWith","renderReqToHTML","result","fontManifest","components","process","env","__NEXT_OPTIMIZE_FONTS","JSON","stringify","__NEXT_OPTIMIZE_IMAGES","validateAmp","rawAmpHtml","ampPageName","validatorPath","validator","AmpHtmlValidator","getInstance","validateString","errors","filter","e","severity","warnings","push","inAmpMode","ampSkipValidation","ampValidatorPath","hybridAmp","ampHtmlFilename","ampBaseDir","ampHtmlFilepath","access","_","ampHtml","includes","amp","writeFile","pageData","dataFile","replace","fromBuildExportRevalidate","revalidate","error","console","stack"],"mappings":"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","sourcesContent":["import url from 'url'\nimport { extname, join, dirname, sep } from 'path'\nimport { renderToHTML } from '../next-server/server/render'\nimport { promises } from 'fs'\nimport AmpHtmlValidator from 'next/dist/compiled/amphtml-validator'\nimport { loadComponents } from '../next-server/server/load-components'\nimport { isDynamicRoute } from '../next-server/lib/router/utils/is-dynamic'\nimport { getRouteMatcher } from '../next-server/lib/router/utils/route-matcher'\nimport { getRouteRegex } from '../next-server/lib/router/utils/route-regex'\nimport { normalizePagePath } from '../next-server/server/normalize-page-path'\nimport { SERVER_PROPS_EXPORT_ERROR } from '../lib/constants'\nimport 'next/dist/next-server/server/node-polyfill-fetch'\nimport { IncomingMessage, ServerResponse } from 'http'\nimport { ComponentType } from 'react'\nimport { GetStaticProps } from '../types'\nimport { requireFontManifest } from '../next-server/server/require'\nimport { FontManifest } from '../next-server/server/font-utils'\nimport { normalizeLocalePath } from '../next-server/lib/i18n/normalize-locale-path'\n\nconst envConfig = require('../next-server/lib/runtime-config')\n\n;(global as any).__NEXT_DATA__ = {\n  nextExport: true,\n}\n\ninterface AmpValidation {\n  page: string\n  result: {\n    errors: AmpHtmlValidator.ValidationError[]\n    warnings: AmpHtmlValidator.ValidationError[]\n  }\n}\n\ninterface PathMap {\n  page: string\n  query?: { [key: string]: string | string[] }\n}\n\ninterface ExportPageInput {\n  path: string\n  pathMap: PathMap\n  distDir: string\n  outDir: string\n  pagesDataDir: string\n  renderOpts: RenderOpts\n  buildExport?: boolean\n  serverRuntimeConfig: string\n  subFolders: string\n  serverless: boolean\n  optimizeFonts: boolean\n  optimizeImages: boolean\n}\n\ninterface ExportPageResults {\n  ampValidations: AmpValidation[]\n  fromBuildExportRevalidate?: number\n  error?: boolean\n}\n\ninterface RenderOpts {\n  runtimeConfig?: { [key: string]: any }\n  params?: { [key: string]: string | string[] }\n  ampPath?: string\n  ampValidatorPath?: string\n  ampSkipValidation?: boolean\n  hybridAmp?: boolean\n  inAmpMode?: boolean\n  optimizeFonts?: boolean\n  optimizeImages?: boolean\n  fontManifest?: FontManifest\n  locales?: string[]\n  locale?: string\n}\n\ntype ComponentModule = ComponentType<{}> & {\n  renderReqToHTML: typeof renderToHTML\n  getStaticProps?: GetStaticProps\n}\n\nexport default async function exportPage({\n  path,\n  pathMap,\n  distDir,\n  outDir,\n  pagesDataDir,\n  renderOpts,\n  buildExport,\n  serverRuntimeConfig,\n  subFolders,\n  serverless,\n  optimizeFonts,\n  optimizeImages,\n}: ExportPageInput): Promise<ExportPageResults> {\n  let results: ExportPageResults = {\n    ampValidations: [],\n  }\n\n  try {\n    const { query: originalQuery = {} } = pathMap\n    const { page } = pathMap\n    const filePath = normalizePagePath(path)\n    const ampPath = `${filePath}.amp`\n    const isDynamic = isDynamicRoute(page)\n    let query = { ...originalQuery }\n    let params: { [key: string]: string | string[] } | undefined\n\n    let updatedPath = path\n    let locale = query.__nextLocale || renderOpts.locale\n    delete query.__nextLocale\n\n    if (renderOpts.locale) {\n      const localePathResult = normalizeLocalePath(path, renderOpts.locales)\n\n      if (localePathResult.detectedLocale) {\n        updatedPath = localePathResult.pathname\n        locale = localePathResult.detectedLocale\n      }\n    }\n\n    // We need to show a warning if they try to provide query values\n    // for an auto-exported page since they won't be available\n    const hasOrigQueryValues = Object.keys(originalQuery).length > 0\n    const queryWithAutoExportWarn = () => {\n      if (hasOrigQueryValues) {\n        throw new Error(\n          `\\nError: you provided query values for ${path} which is an auto-exported page. These can not be applied since the page can no longer be re-rendered on the server. To disable auto-export for this page add \\`getInitialProps\\`\\n`\n        )\n      }\n    }\n\n    // Check if the page is a specified dynamic route\n    if (isDynamic && page !== path) {\n      params = getRouteMatcher(getRouteRegex(page))(updatedPath) || undefined\n      if (params) {\n        // we have to pass these separately for serverless\n        if (!serverless) {\n          query = {\n            ...query,\n            ...params,\n          }\n        }\n      } else {\n        throw new Error(\n          `The provided export path '${updatedPath}' doesn't match the '${page}' page.\\nRead more: https://err.sh/vercel/next.js/export-path-mismatch`\n        )\n      }\n    }\n\n    const headerMocks = {\n      headers: {},\n      getHeader: () => ({}),\n      setHeader: () => {},\n      hasHeader: () => false,\n      removeHeader: () => {},\n      getHeaderNames: () => [],\n    }\n\n    const req = ({\n      url: updatedPath,\n      ...headerMocks,\n    } as unknown) as IncomingMessage\n    const res = ({\n      ...headerMocks,\n    } as unknown) as ServerResponse\n\n    envConfig.setConfig({\n      serverRuntimeConfig,\n      publicRuntimeConfig: renderOpts.runtimeConfig,\n    })\n\n    let htmlFilename = `${filePath}${sep}index.html`\n    if (!subFolders) htmlFilename = `${filePath}.html`\n\n    const pageExt = extname(page)\n    const pathExt = extname(path)\n    // Make sure page isn't a folder with a dot in the name e.g. `v1.2`\n    if (pageExt !== pathExt && pathExt !== '') {\n      // If the path has an extension, use that as the filename instead\n      htmlFilename = path\n    } else if (path === '/') {\n      // If the path is the root, just use index.html\n      htmlFilename = 'index.html'\n    }\n\n    const baseDir = join(outDir, dirname(htmlFilename))\n    let htmlFilepath = join(outDir, htmlFilename)\n\n    await promises.mkdir(baseDir, { recursive: true })\n    let html\n    let curRenderOpts: RenderOpts = {}\n    let renderMethod = renderToHTML\n\n    const renderedDuringBuild = (getStaticProps: any) => {\n      return !buildExport && getStaticProps && !isDynamicRoute(path)\n    }\n\n    if (serverless) {\n      const curUrl = url.parse(req.url!, true)\n      req.url = url.format({\n        ...curUrl,\n        query: {\n          ...curUrl.query,\n          ...query,\n        },\n      })\n      const { Component: mod, getServerSideProps } = await loadComponents(\n        distDir,\n        page,\n        serverless\n      )\n\n      if (getServerSideProps) {\n        throw new Error(`Error for page ${page}: ${SERVER_PROPS_EXPORT_ERROR}`)\n      }\n\n      // if it was auto-exported the HTML is loaded here\n      if (typeof mod === 'string') {\n        html = mod\n        queryWithAutoExportWarn()\n      } else {\n        // for non-dynamic SSG pages we should have already\n        // prerendered the file\n        if (renderedDuringBuild((mod as ComponentModule).getStaticProps))\n          return results\n\n        if (\n          (mod as ComponentModule).getStaticProps &&\n          !htmlFilepath.endsWith('.html')\n        ) {\n          // make sure it ends with .html if the name contains a dot\n          htmlFilename += '.html'\n          htmlFilepath += '.html'\n        }\n\n        renderMethod = (mod as ComponentModule).renderReqToHTML\n        const result = await renderMethod(\n          req,\n          res,\n          'export',\n          {\n            ampPath,\n            /// @ts-ignore\n            optimizeFonts,\n            /// @ts-ignore\n            optimizeImages,\n            fontManifest: optimizeFonts\n              ? requireFontManifest(distDir, serverless)\n              : null,\n            locale: locale!,\n            locales: renderOpts.locales!,\n          },\n          // @ts-ignore\n          params\n        )\n        curRenderOpts = result.renderOpts || {}\n        html = result.html\n      }\n\n      if (!html) {\n        throw new Error(`Failed to render serverless page`)\n      }\n    } else {\n      const components = await loadComponents(distDir, page, serverless)\n\n      if (components.getServerSideProps) {\n        throw new Error(`Error for page ${page}: ${SERVER_PROPS_EXPORT_ERROR}`)\n      }\n\n      // for non-dynamic SSG pages we should have already\n      // prerendered the file\n      if (renderedDuringBuild(components.getStaticProps)) {\n        return results\n      }\n\n      // TODO: de-dupe the logic here between serverless and server mode\n      if (components.getStaticProps && !htmlFilepath.endsWith('.html')) {\n        // make sure it ends with .html if the name contains a dot\n        htmlFilepath += '.html'\n        htmlFilename += '.html'\n      }\n\n      if (typeof components.Component === 'string') {\n        html = components.Component\n        queryWithAutoExportWarn()\n      } else {\n        /**\n         * This sets environment variable to be used at the time of static export by head.tsx.\n         * Using this from process.env allows targetting both serverless and SSR by calling\n         * `process.env.__NEXT_OPTIMIZE_FONTS`.\n         * TODO(prateekbh@): Remove this when experimental.optimizeFonts are being clened up.\n         */\n        if (optimizeFonts) {\n          process.env.__NEXT_OPTIMIZE_FONTS = JSON.stringify(true)\n        }\n        if (optimizeImages) {\n          process.env.__NEXT_OPTIMIZE_IMAGES = JSON.stringify(true)\n        }\n        curRenderOpts = {\n          ...components,\n          ...renderOpts,\n          ampPath,\n          params,\n          optimizeFonts,\n          optimizeImages,\n          fontManifest: optimizeFonts\n            ? requireFontManifest(distDir, serverless)\n            : null,\n          locale: locale as string,\n        }\n        // @ts-ignore\n        html = await renderMethod(req, res, page, query, curRenderOpts)\n      }\n    }\n\n    const validateAmp = async (\n      rawAmpHtml: string,\n      ampPageName: string,\n      validatorPath?: string\n    ) => {\n      const validator = await AmpHtmlValidator.getInstance(validatorPath)\n      const result = validator.validateString(rawAmpHtml)\n      const errors = result.errors.filter((e) => e.severity === 'ERROR')\n      const warnings = result.errors.filter((e) => e.severity !== 'ERROR')\n\n      if (warnings.length || errors.length) {\n        results.ampValidations.push({\n          page: ampPageName,\n          result: {\n            errors,\n            warnings,\n          },\n        })\n      }\n    }\n\n    if (curRenderOpts.inAmpMode && !curRenderOpts.ampSkipValidation) {\n      await validateAmp(html, path, curRenderOpts.ampValidatorPath)\n    } else if (curRenderOpts.hybridAmp) {\n      // we need to render the AMP version\n      let ampHtmlFilename = `${ampPath}${sep}index.html`\n      if (!subFolders) {\n        ampHtmlFilename = `${ampPath}.html`\n      }\n      const ampBaseDir = join(outDir, dirname(ampHtmlFilename))\n      const ampHtmlFilepath = join(outDir, ampHtmlFilename)\n\n      try {\n        await promises.access(ampHtmlFilepath)\n      } catch (_) {\n        // make sure it doesn't exist from manual mapping\n        let ampHtml\n        if (serverless) {\n          req.url += (req.url!.includes('?') ? '&' : '?') + 'amp=1'\n          // @ts-ignore\n          ampHtml = (await renderMethod(req, res, 'export')).html\n        } else {\n          ampHtml = await renderMethod(\n            req,\n            res,\n            page,\n            // @ts-ignore\n            { ...query, amp: 1 },\n            curRenderOpts\n          )\n        }\n\n        if (!curRenderOpts.ampSkipValidation) {\n          await validateAmp(ampHtml, page + '?amp=1')\n        }\n        await promises.mkdir(ampBaseDir, { recursive: true })\n        await promises.writeFile(ampHtmlFilepath, ampHtml, 'utf8')\n      }\n    }\n\n    if ((curRenderOpts as any).pageData) {\n      const dataFile = join(\n        pagesDataDir,\n        htmlFilename.replace(/\\.html$/, '.json')\n      )\n\n      await promises.mkdir(dirname(dataFile), { recursive: true })\n      await promises.writeFile(\n        dataFile,\n        JSON.stringify((curRenderOpts as any).pageData),\n        'utf8'\n      )\n\n      if (curRenderOpts.hybridAmp) {\n        await promises.writeFile(\n          dataFile.replace(/\\.json$/, '.amp.json'),\n          JSON.stringify((curRenderOpts as any).pageData),\n          'utf8'\n        )\n      }\n    }\n    results.fromBuildExportRevalidate = (curRenderOpts as any).revalidate\n\n    await promises.writeFile(htmlFilepath, html, 'utf8')\n    return results\n  } catch (error) {\n    console.error(\n      `\\nError occurred prerendering page \"${path}\". Read more: https://err.sh/next.js/prerender-error\\n` +\n        error.stack\n    )\n    return { ...results, error: true }\n  }\n}\n"]}
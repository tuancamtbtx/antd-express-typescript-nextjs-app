{"version":3,"sources":["../../../../../next-server/lib/router/utils/resolve-rewrites.ts"],"names":["customRouteMatcher","resolveRewrites","asPath","pages","basePath","rewrites","query","resolveHref","includes","rewrite","matcher","source","params","destination","destRes","parsedDestination","pathname","Object","assign","resolvedHref"],"mappings":"qEACA,+DACA,iFAEA,mF,mFAEA,KAAMA,CAAAA,kBAAkB,CAAG,uBAAU,IAAV,CAA3B,CAEe,QAASC,CAAAA,eAAT,CACbC,MADa,CAEbC,KAFa,CAGbC,QAHa,CAIbC,QAJa,CAKbC,KALa,CAMbC,WANa,CAOb,CACA,GAAI,CAACJ,KAAK,CAACK,QAAN,CAAeN,MAAf,CAAL,CAA6B,CAC3B,IAAK,KAAMO,CAAAA,OAAX,GAAsBJ,CAAAA,QAAtB,CAAgC,CAC9B,KAAMK,CAAAA,OAAO,CAAGV,kBAAkB,CAACS,OAAO,CAACE,MAAT,CAAlC,CACA,KAAMC,CAAAA,MAAM,CAAGF,OAAO,CAACR,MAAD,CAAtB,CAEA,GAAIU,MAAJ,CAAY,CACV,GAAI,CAACH,OAAO,CAACI,WAAb,CAA0B,CACxB;AACA,MACD,CACD,KAAMC,CAAAA,OAAO,CAAG,gCACdL,OAAO,CAACI,WADM,CAEdD,MAFc,CAGdN,KAHc,CAId,IAJc,CAKdG,OAAO,CAACL,QAAR,GAAqB,KAArB,CAA6B,EAA7B,CAAkCA,QALpB,CAAhB,CAOAF,MAAM,CAAGY,OAAO,CAACC,iBAAR,CAA0BC,QAAnC,CACAC,MAAM,CAACC,MAAP,CAAcZ,KAAd,CAAqBQ,OAAO,CAACC,iBAAR,CAA0BT,KAA/C,EAEA,GAAIH,KAAK,CAACK,QAAN,CAAe,oDAAwBN,MAAxB,CAAf,CAAJ,CAAqD,CACnD;AACA;AACA,MACD,CAED;AACA,KAAMiB,CAAAA,YAAY,CAAGZ,WAAW,CAACL,MAAD,CAAhC,CAEA,GAAIiB,YAAY,GAAKjB,MAAjB,EAA2BC,KAAK,CAACK,QAAN,CAAeW,YAAf,CAA/B,CAA6D,CAC3D,MACD,CACF,CACF,CACF,CACD,MAAOjB,CAAAA,MAAP,CACD","sourcesContent":["import { ParsedUrlQuery } from 'querystring'\nimport pathMatch from './path-match'\nimport prepareDestination from './prepare-destination'\nimport { Rewrite } from '../../../../lib/load-custom-routes'\nimport { removePathTrailingSlash } from '../../../../client/normalize-trailing-slash'\n\nconst customRouteMatcher = pathMatch(true)\n\nexport default function resolveRewrites(\n  asPath: string,\n  pages: string[],\n  basePath: string,\n  rewrites: Rewrite[],\n  query: ParsedUrlQuery,\n  resolveHref: (path: string) => string\n) {\n  if (!pages.includes(asPath)) {\n    for (const rewrite of rewrites) {\n      const matcher = customRouteMatcher(rewrite.source)\n      const params = matcher(asPath)\n\n      if (params) {\n        if (!rewrite.destination) {\n          // this is a proxied rewrite which isn't handled on the client\n          break\n        }\n        const destRes = prepareDestination(\n          rewrite.destination,\n          params,\n          query,\n          true,\n          rewrite.basePath === false ? '' : basePath\n        )\n        asPath = destRes.parsedDestination.pathname!\n        Object.assign(query, destRes.parsedDestination.query)\n\n        if (pages.includes(removePathTrailingSlash(asPath))) {\n          // check if we now match a page as this means we are done\n          // resolving the rewrites\n          break\n        }\n\n        // check if we match a dynamic-route, if so we break the rewrites chain\n        const resolvedHref = resolveHref(asPath)\n\n        if (resolvedHref !== asPath && pages.includes(resolvedHref)) {\n          break\n        }\n      }\n    }\n  }\n  return asPath\n}\n"]}